//-----------------------------------------------------------------------------------------------
//
// 敵ボスの処理[enemy_boss.cpp]
// Author : SHUGO kURODA
//
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// インクルードファイル
//-----------------------------------------------------------------------------------------------
#include "manager.h"
#include "renderer.h"

#include "load.h"
#include "sound.h"

#include "game.h"
#include "library.h"
#include "effect.h"
#include "logo.h"
#include "score.h"
#include "fade_scene.h"

#include "player.h"
#include "bullet.h"
#include "explosion.h"
#include "meshfield.h"
#include "logo.h"

// 追加
#include "x_file.h"
#include "title.h"
#include "model_obstacle.h"

//-----------------------------------------------------------------------------------------------
// 定数宣言
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// コンストラクタ
//-----------------------------------------------------------------------------------------------
CObstacle::CObstacle() :m_PosOld(0.0f, 0.0f, 0.0f)
{
}

//-----------------------------------------------------------------------------------------------
// デストラクタ
//-----------------------------------------------------------------------------------------------
CObstacle::~CObstacle()
{
}

//-----------------------------------------------------------------------------------------------
// 生成
//-----------------------------------------------------------------------------------------------
CObstacle *CObstacle::Create(const D3DXVECTOR3& pos, const D3DXVECTOR3& rot, const char* name)
{
	// ポインタクラスを宣言
	CObstacle* pObstacle = new CObstacle;

	if (pObstacle != nullptr)
	{
		// 位置設定
		pObstacle->SetPosition(pos);
		// 角度設定
		pObstacle->SetRotation(rot);
		// Xファイルの設定
		pObstacle->BindXFile(CManager::GetXFile()->GetXFile(name));
		// 初期化
		pObstacle->Init();
	}

	return pObstacle;
}

//-----------------------------------------------------------------------------------------------
// 初期化
//-----------------------------------------------------------------------------------------------
HRESULT CObstacle::Init()
{
	// 種類を設定
	SetObjType(EObject::OBJ_ENEMYBOSS);
	// 初期化
	CModel::Init();

	return S_OK;
}

//-----------------------------------------------------------------------------------------------
// 終了
//-----------------------------------------------------------------------------------------------
void CObstacle::Uninit()
{
	CModel::Uninit();
}

//-----------------------------------------------------------------------------------------------
// 更新
//-----------------------------------------------------------------------------------------------
void CObstacle::Update()
{
	//当たり判定
	//Collision(D3DXVECTOR2(pos.x, pos.z));

	//位置情報更新
	//CModel::SetPosition(pos);
}

//-----------------------------------------------------------------------------------------------
// 描画
//-----------------------------------------------------------------------------------------------
void CObstacle::Draw()
{
	//描画処理
	CModel::Draw();
}

//-----------------------------------------------------------------------------------------------
// 当たり判定
//-----------------------------------------------------------------------------------------------
bool CObstacle::Collision()
{
	// 位置取得
	D3DXVECTOR3 pos = GetPosition();

	//サイズ取得
	float fLength = GetSizeMax().x;

	// プレイヤー生成
	for (int nCntPlayer = 0; nCntPlayer < 1/*CPlayer::PLAYER_MAX*/; nCntPlayer++)
	{
		//プレイヤー情報の取得
		CPlayer *pPlayer = CTitle::GetPlayer();

		if (pPlayer != nullptr)
		{
			// プレイヤーが通常状態だったら
			if (pPlayer->GetState() == CPlayer::STATE_NORMAL)
			{
				// プレイヤー座標
				D3DXVECTOR2 posPlayer = D3DXVECTOR2(pPlayer->GetPosition().x, pPlayer->GetPosition().z);

				////敵と当たったら(球体の当たり判定)
				//if (LibrarySpace::CylinderCollision3D(posStart, posPlayer, fLength, pPlayer->GetSizeMax().x))
				//{//ダメージ処理
				//	pPlayer->Damage();
				//	return true;	//当たった
				//}
			}
		}
	}

	return false;	//当たってない
}
